function(t, e, n) {
        "use strict";

        function i(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = n(1),
            o = i(r),
            s = n(160),
            a = i(s),
            u = n(83),
            c = (i(u), n(3)),
            l = i(c),
            f = n(133),
            h = i(f),
            d = n(39),
            p = i(d),
            v = n(119),
            m = v.vec2,
            g = m.create(),
            _ = m.create(),
            w = new h.default.Noise;
        w.seed(Math.random());
        var y = window.BrowserDetect.isDesktop;
        e.default = {
            template: a.default,
            mixins: [o.default],
            props: {
                wide: Boolean
            },
            mounted: function() {
                this.circlesContainer = this.$refs.svgEl.querySelector(".circles__container"), this.id = Math.round(Date.now() * Math.random() * 10), this.circleList = [];
                var t = this.makeGeom;
                this.width = 200, this.height = 200, this.padding = [0, 0], this.wide && (t = this.makeWide, this.width = 215, this.height = 60, this.padding = [107.5, 30]);
                var e = this.width,
                    n = this.height,
                    i = this.padding[0],
                    r = this.padding[1],
                    o = -e / 2 - i + " " + (-n / 2 - r) + " " + (e + 2 * i) + " " + (n + 2 * r);
                this.$refs.svgEl.setAttribute("viewBox", o), this.$refs.svgGray.setAttribute("viewBox", o);
                for (var s = 0; s < 3; s++) {
                    var a = this.makePath();
                    this.circlesContainer.appendChild(a), this.circleList.push({
                        el: a,
                        pos: t(),
                        basePos: t(),
                        seed: Math.random(),
                        fixed: 2 === s
                    })
                }
                var u = this.makePath();
                u.setAttribute("stroke-width", this.wide ? 3 : 5), u.setAttribute("stroke", "#e5e5e5"), u.setAttribute("stroke", "url(#linear-0)");
                var c = t();
                this.computePath(u, c), this.$refs.svgGray.appendChild(u), this.mouseWasIn = !1, this.mousePos = m.create(), this.enterCoords = m.create(), this.enterTime = 0, this.adistLerp = 0, this.mouseInProgress = 0, this.isMouseIn = !1, this.time = 0, this.lastTime = Date.now() / 1e3, this.leaveTime = null, this.$el.addEventListener("mousemove", this.onMouseMove), this.$el.addEventListener("mouseenter", this.onMouseIn), this.$el.addEventListener("mouseleave", this.onMouseOut), this.render(), this.onMouseOut()
            },
            methods: {
                onShow: function() {},
                onHide: function() {},
                onShown: function() {},
                onHidden: function() {},
                start: function() {
                    y && (this.leaveTime = null, l.default.subscribe("picto-btn-" + this.id, this.render))
                },
                pause: function() {
                    this.leaveTime = Date.now() / 1e3
                },
                onMouseIn: function() {
                    this.start(), this.$el.classList.add("mouse-in-bounds"), this.isMouseIn = !0
                },
                onMouseOut: function() {
                    this.pause(), this.isMouseIn = !1
                },
                onMouseMove: function(t) {
                    var e = 1 / this.$el.clientWidth,
                        n = 1 / this.$el.clientHeight,
                        i = this.width / 2,
                        r = this.height / 2;
                    this.wide && (i *= 2, r *= 2);
                    var o = 2 * (t.offsetX * e - .5) * i,
                        s = 2 * (t.offsetY * n - .5) * r;
                    this.mousePos[0] = o, this.mousePos[1] = s;
                    var a = o < i / 2 && o > -i / 2,
                        u = s < r / 2 && s > -r / 2,
                        c = a && u,
                        l = this.time - this.enterTime < 1.2;
                    !c || l || this.mouseWasIn || (this.enterTime = this.time, this.enterCoords[0] = this.mousePos[0], this.enterCoords[1] = this.mousePos[1], this.mouseWasIn = !0, this.$emit("enter-bounds")), !c && this.mouseWasIn && (this.$emit("leave-bounds"), this.mouseWasIn = !1, this.adistLerp = 0)
                },
                makePath: function() {
                    var t = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    t.setAttribute("fill", "none");
                    var e = 4;
                    return 2 === this.circleList.length && (e = 6), this.wide && (e -= 2), t.setAttribute("stroke-width", e), t.setAttribute("stroke", "url(#linear-" + this.circleList.length + ")"), t.setAttribute("style", "filter:url(#blend-circle);"), t.setAttribute("opacity", "1"), t
                },
                makeGeom: function() {
                    for (var t, e, n = new Float32Array(120), i = 0; i < 60; i++) t = Math.cos(i / 60 * Math.PI * 2), e = Math.sin(i / 60 * Math.PI * 2), t *= 50, e *= 50, n.set([t, e], 2 * i);
                    return n
                },
                makeWide: function() {
                    var t, e, n, i = new Float32Array(120),
                        r = this.height,
                        o = this.width,
                        s = r / 2,
                        a = 0;
                    for (n = 0; n < 15; n++) t = Math.cos(n / 15 * Math.PI + Math.PI / 2), e = Math.sin(n / 15 * Math.PI + Math.PI / 2), t *= s, e *= s, t -= o / 2 - s, i.set([t, e], a), a += 2;
                    for (n = 0; n < 15; n++) e = -r / 2, t = n / 15 * (o - 2 * s) - (o / 2 - s), i.set([t, e], a), a += 2;
                    for (n = 0; n < 15; n++) t = Math.cos(n / 15 * Math.PI - Math.PI / 2), e = Math.sin(n / 15 * Math.PI - Math.PI / 2), t *= s, e *= s, t += o / 2 - s, i.set([t, e], a), a += 2;
                    for (n = 0; n < 15; n++) e = r / 2, t = o / 2 - s - n / 15 * (o - 2 * s), i.set([t, e], a), a += 2;
                    return i
                },
                computePath: function(t, e) {
                    for (var n, i, r = "M", o = 0; o < e.length / 2; o++) 0 !== o && (r += "L"), n = e[2 * o + 0], i = e[2 * o + 1], r += n + " " + i + " ";
                    r += "Z", t.setAttribute("d", r)
                },
                render: function() {
                    var t = Date.now() / 1e3,
                        e = t - this.lastTime;
                    this.lastTime = t, this.time += e;
                    var n = this.time;
                    if (this.isMouseIn ? this.mouseInProgress += 5 * e : this.mouseInProgress -= 5 * e, null !== this.leaveTime && this.leaveTime - t > 1) return l.default.unsubscribe("picto-btn-" + this.id, this.render), void this.$el.classList.remove("mouse-in-bounds");
                    this.mouseInProgress = Math.max(0, Math.min(1, this.mouseInProgress));
                    var i = (this.time - this.enterTime) / 1.2;
                    i = Math.max(0, Math.min(i, 1)), i = p.default.easeInOutCubic(i), this.adistLerp += 1 * e, this.adistLerp = Math.min(1, this.adistLerp);
                    for (var r, o, s, a, u, c = 0; c < this.circleList.length; c++) {
                        r = this.circleList[c], o = r.el, s = r.pos, a = r.basePos, u = r.seed;
                        for (var f, h, d, v, y, b = 0; b < 60; b++) {
                            f = a[2 * b + 0], h = a[2 * b + 1], g[0] = f, g[1] = h;
                            var x = m.dist(this.mousePos, g),
                                M = Math.max(0, 65 - x) / 65;
                            this.mouseWasIn ? M *= 1 - i : M *= this.adistLerp;
                            var S = 1.3;
                            this.wide && (S = .7), m.lerp(g, g, this.mousePos, Math.min(1, M * S)), f = g[0], h = g[1], m.sub(_, g, this.mousePos), m.normalize(_, _);
                            var T = this.width;
                            this.height > this.width && (T = this.height);
                            var F = m.dist(this.enterCoords, g);
                            F /= T;
                            var I = 1 - 4 * (1.25 * i - F);
                            I = Math.max(0, Math.min(1, I));
                            var D = Math.sin(I * Math.PI);
                            f += _[0] * D * 10, h += _[1] * D * 10, d = .01 * f + n + 1e3 * u, v = .01 * h + n + 1e3 * u, y = w.perlin2(d, v);
                            var E = this.mouseWasIn ? .5 * i : 1 - this.adistLerp;
                            this.wide && (E *= .5), f *= 1 + .3 * y * (Math.sin(i * Math.PI) + 2 * M + E), h *= 1 + .3 * y * (Math.sin(i * Math.PI) + 2 * M + E), s[2 * b + 0] = a[2 * b + 0] + this.mouseInProgress * (f - a[2 * b + 0]), s[2 * b + 1] = a[2 * b + 1] + this.mouseInProgress * (h - a[2 * b + 1])
                        }
                        this.computePath(o, s)
                    }
                }
            }
        }, t.exports = e.default
    }
